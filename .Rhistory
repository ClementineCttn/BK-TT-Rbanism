<<<<<<< HEAD
map_city_streets2(survey_google[, 4][[sl]])
x = "Bucharest Romania"
## get municipal boundary from osmdata
bb <- osmdata::getbb(place_name = x,
format_out = 'sf_polygon',
silent = FALSE)
## get data from osmextract
osm_lines = oe_get(x,
stringsAsFactors = FALSE,
quiet = TRUE)
nrow(osm_lines)
x
## get data from osmextract
osm_lines = oe_get(bb,
stringsAsFactors = FALSE,
quiet = TRUE)
nrow(osm_lines)
## get data from osmextract
osm_lines = oe_get(x,
stringsAsFactors = FALSE,
quiet = FALSE)
x <- "bucharest, RO"
## get municipal boundary from osmdata
bb <- osmdata::getbb(place_name = x,
format_out = 'sf_polygon',
silent = FALSE)
## get data from osmextract
osm_lines = oe_get(x,
stringsAsFactors = FALSE,
quiet = FALSE)
osm_lines = oe_get(x,
stringsAsFactors = FALSE,
force_download = TRUE,
quiet = FALSE)
map_city_streets2 <- function(x) {
## get municipal boundary from osmdata
bb <- osmdata::getbb(place_name = x,
format_out = 'sf_polygon',
silent = FALSE)
## get data from osmextract
osm_lines = oe_get(x,
stringsAsFactors = FALSE,
# force_download = TRUE,
quiet = FALSE)
nrow(osm_lines)
## get highway types of interest
ht <- c(
"motorway",
"motorway_link",
"primary",
"primary_link",
"secondary",
"tertiary",
"unclassified"
)
osm_major_roads <- osm_lines[osm_lines$highway %in% ht, ] %>%
sf::st_intersection(bb)
## plot data
plot(bb)
plot(
osm_major_roads["highway"]$geometry,
key.pos = 1,
add = T,
col = "red",
lwd = 0.7
)
}
t
# map_city_streets(survey_google[, 4][[sl-2:sl]])
map_city_streets2(survey_google[, 4][[sl]])
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(tidyverse)  # collection of packages for data manipulation, visualisation, etc.
library(googlesheets4)  # access data from Google sheets
library(sf)  # working with spatial data
library(osmdata)  # access OpenStreetMap data via the Overpass API
library(osmextract)  # retrieve bulk OpenStreetMap data
library(ggmap)
library(kableExtra)  # create and style HTML tables
# lists the files with "survey-" in their name in the same folder as this document
files <- list.files(pattern="^survey-")
files
# creates an empty table
survey <- tibble()
n <- length(files)
# the 'for-loop':
for (i in 1:n){
f <- read.csv2(files[i], header=F)
if(i == 1){
survey <- f
} else {
survey <- cbind(survey, f[,2])
}
}
transpose <- as.data.frame(t(survey))
colnames(transpose) <- c("Name", "ArrivalYearTU", "CityBefore", "InterestR", "Experience")
survey_together <- transpose[-1,]
rownames(survey_together) <- 1:n
survey_together$ArrivalYearTU <- as.numeric(survey_together$ArrivalYearTU)
survey_together$InterestR <- as.numeric(survey_together$InterestR)
# as with spreadsheets, we can create new variables
survey_together$SeniorityAtTUD <- 2021 - survey_together$ArrivalYearTU
survey_together
# Read survey data from a Google sheet that stores the survey responses
# Note that getting data via `googlesheets4` requires a Google account
# unless `gs4_deauth()` is used. Here we choose to deauthorise so that
# the workshop participants can easily access the data.
gs4_deauth()
survey_google <- read_sheet("https://docs.google.com/spreadsheets/d/1_eErh6dy7uMiEewDc4OW_R3sl0qah2-1kYj3JW9H5tA/edit?resourcekey#gid=800252241")
# clean survey data
colnames(survey_google) <- c("timestamp", "name", "year_start_tud", "place", "interest_r", "progr_exp")
survey_google <- survey_google %>%
mutate(progr_exp = ifelse(progr_exp == "Yes", TRUE, FALSE)) %>%
filter(!grepl("Test", name))
# print cleaned survey data
survey_google
survey_google %>%
kbl() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
library(ggplot2)
q <- ggplot(survey_together, aes(x=SeniorityAtTUD, y=InterestR))
q + geom_point()
fit <- lm(InterestR ~ SeniorityAtTUD, data = survey_together)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 2),
"Intercept =",signif(fit$coef[[1]],2 ),
" Slope =",signif(fit$coef[[2]], 2),
" P =",signif(summary(fit)$coef[2,4], 2)))
library(sf)
library(osmextract)
library(osmdata)
library(leaflet)
# get places from csv survey
places <- survey_google[, 4]
for (i in 1:nrow(places)){
## get municipal boundary from osmdata
bb <- osmdata::getbb(
place_name = places[i,],
format_out = 'sf_polygon',
silent = FALSE
)
assign(paste0("bb", i), bb)
if(i == 1){
bbx <- bb
} else{
bbx <- rbind(bbx, bb)
}
}
#map places on interactive map
leaflet(bbx) %>% addProviderTiles("CartoDB.Positron") %>%
addPolygons()
sl <- nrow(survey_google)
# map_city_streets(survey_google[, 4][[sl-2:sl]])
map_city_streets(survey_google[, 4][[sl]])
survey_google
sl
nrow(survey_google)
survey_google[, 4]
# map_city_streets(survey_google[, 4][[sl-2:sl]])
map_city_streets(survey_google[, 4][sl, ])
# map_city_streets(survey_google[, 4][[sl-2:sl]])
map_city_streets(survey_google[, 4][sl])
survey_google[, 4]
# map_city_streets(survey_google[, 4][[sl-2:sl]])
map_city_streets(pull(survey_google[, 4])[sl])
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
map_city_streets2 <- function(x) {
## get municipal boundary from osmdata
bb <- osmdata::getbb(place_name = x,
format_out = 'sf_polygon',
silent = FALSE)
## get data from osmextract
osm_lines = oe_get(x,
stringsAsFactors = FALSE,
# force_download = TRUE,
quiet = FALSE)
nrow(osm_lines)
## get highway types of interest
ht <- c(
"motorway",
"motorway_link",
"primary",
"primary_link",
"secondary",
"tertiary",
"unclassified"
)
osm_major_roads <- osm_lines[osm_lines$highway %in% ht, ] %>%
sf::st_intersection(bb)
## plot data
plot(bb)
plot(
osm_major_roads["highway"]$geometry,
key.pos = 1,
add = T,
col = "red",
lwd = 0.7
)
}
osmextract::oe_get("Iran")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(tidyverse)  # collection of packages for data manipulation, visualisation, etc.
library(googlesheets4)  # access data from Google sheets
library(sf)  # working with spatial data
library(osmdata)  # access OpenStreetMap data via the Overpass API
library(osmextract)  # retrieve bulk OpenStreetMap data
library(ggmap)
library(kableExtra)  # create and style HTML tables
# lists the files with "survey-" in their name in the same folder as this document
files <- list.files(pattern="^survey-")
files
# creates an empty table
survey <- tibble()
n <- length(files)
# the 'for-loop':
for (i in 1:n){
f <- read.csv2(files[i], header=F)
if(i == 1){
survey <- f
} else {
survey <- cbind(survey, f[,2])
}
}
transpose <- as.data.frame(t(survey))
colnames(transpose) <- c("Name", "ArrivalYearTU", "CityBefore", "InterestR", "Experience")
survey_together <- transpose[-1,]
rownames(survey_together) <- 1:n
survey_together$ArrivalYearTU <- as.numeric(survey_together$ArrivalYearTU)
survey_together$InterestR <- as.numeric(survey_together$InterestR)
# as with spreadsheets, we can create new variables
survey_together$SeniorityAtTUD <- 2021 - survey_together$ArrivalYearTU
survey_together
# Read survey data from a Google sheet that stores the survey responses
# Note that getting data via `googlesheets4` requires a Google account
# unless `gs4_deauth()` is used. Here we choose to deauthorise so that
# the workshop participants can easily access the data.
gs4_deauth()
survey_google <- read_sheet("https://docs.google.com/spreadsheets/d/1_eErh6dy7uMiEewDc4OW_R3sl0qah2-1kYj3JW9H5tA/edit?resourcekey#gid=800252241")
# clean survey data
colnames(survey_google) <- c("timestamp", "name", "year_start_tud", "place", "interest_r", "progr_exp")
survey_google <- survey_google %>%
mutate(progr_exp = ifelse(progr_exp == "Yes", TRUE, FALSE)) %>%
filter(!grepl("Test", name))
# print cleaned survey data
survey_google
survey_google %>%
kbl() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
library(ggplot2)
q <- ggplot(survey_together, aes(x=SeniorityAtTUD, y=InterestR))
q + geom_point()
fit <- lm(InterestR ~ SeniorityAtTUD, data = survey_together)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 2),
"Intercept =",signif(fit$coef[[1]],2 ),
" Slope =",signif(fit$coef[[2]], 2),
" P =",signif(summary(fit)$coef[2,4], 2)))
library(sf)
library(osmextract)
library(osmdata)
library(leaflet)
# get places from csv survey
places <- survey_google[, 4]
for (i in 1:nrow(places)){
## get municipal boundary from osmdata
bb <- osmdata::getbb(
place_name = places[i,],
format_out = 'sf_polygon',
silent = FALSE
)
assign(paste0("bb", i), bb)
if(i == 1){
bbx <- bb
} else{
bbx <- rbind(bbx, bb)
}
}
library(sf)
library(osmextract)
library(osmdata)
library(leaflet)
# get places from csv survey
places <- survey_google[, 4]
## get municipal boundary from osmdata
bb <- osmdata::getbb(
place_name = places[i,],
format_out = 'sf_polygon',
silent = FALSE
)
bb
assign(paste0("bb", i), bb)
if(i == 1){
bbx <- bb
} else{
bbx <- rbind(bbx, bb)
}
?getbb
assign
bbx
library(sf)
library(osmextract)
library(osmdata)
library(leaflet)
# get places from csv survey
places <- survey_google[, 4]
for (i in 4:nrow(places)){
## get municipal boundary from osmdata
bb <- osmdata::getbb(
place_name = places[i,],
format_out = 'sf_polygon',
silent = FALSE
)
assign(paste0("bb", i), bb)
if(i == 1){
bbx <- bb
} else{
bbx <- rbind(bbx, bb)
}
}
7:nrow(places)
library(sf)
library(osmextract)
library(osmdata)
library(leaflet)
# get places from csv survey
places <- survey_google[, 4]
for (i in c(1,2,4,5,7:nrow(places)){
library(sf)
library(osmextract)
library(osmdata)
library(leaflet)
# get places from csv survey
places <- survey_google[, 4]
for (i in c(1,2,4,5,7:nrow(places))){
## get municipal boundary from osmdata
bb <- osmdata::getbb(
place_name = places[i,],
=======
place_name = places[i],
format_out = 'sf_polygon',
silent = FALSE
)
big_streets <- getbb(places[i]) %>%
opq() %>%
add_osm_feature(
key = "highway",
value = c(
"motorway",
"primary",
"motorway_link",
"primary_link"
)
) %>%
osmdata_sf() %>%
pluck("osm_lines") %>%
st_intersection(bb)
med_streets <- getbb(places[i]) %>%
opq() %>%
add_osm_feature(
key = "highway",
value = c(
"secondary",
"tertiary",
"secondary_link",
"tertiary_link"
)
) %>%
osmdata_sf() %>%
pluck("osm_lines") %>%
st_intersection(bb)
small_streets <- getbb(places[i]) %>%
opq() %>%
add_osm_feature(
key = "highway",
value = c(
"residential",
"living_street",
"unclassified",
"service",
"footway"
)
) %>%
osmdata_sf() %>%
pluck("osm_lines") %>%
st_intersection(bb)
river <- getbb(places[i]) %>%
opq() %>%
add_osm_feature(key = "natural",
value = "water") %>%
# add_osm_feature(key = "water",
#                 value = "river") %>%
osmdata_sf() %>%
pluck("osm_polygons") %>%
st_intersection(bb)
railway <- getbb(places[i]) %>%
opq() %>%
add_osm_feature(key = "railway", value = "rail") %>%
osmdata_sf() %>%
pluck("osm_lines") %>%
st_intersection(bb)
p <- ggplot() +
geom_sf(
data = river,
inherit.aes = FALSE,
fill = "steelblue",
color = "white",
size = 0.05,
) +
geom_sf(
data = railway,
inherit.aes = FALSE,
color = "orange",
size = .6,
# linetype = "dotdash",
) +
geom_sf(
data = med_streets,
inherit.aes = FALSE,
color = "black",
size = .3,
) +
geom_sf(
data = small_streets,
inherit.aes = FALSE,
color = "#666666",
size = .2,
) +
geom_sf(
data = big_streets,
inherit.aes = FALSE,
color = "black",
size = .8,
) +
geom_sf(
data = st_cast(bb, "LINESTRING"),
inherit.aes = FALSE,
color = "darkred",
size = 1
) +
coord_sf(
xlim = getbb(places[i])[1, ],
ylim = getbb(places[i])[2, ],
expand = FALSE
) +
theme_void() +
labs(title = toupper(places[i]))
return(p)
}
}
get_boundaries(places[1]) # only run this for Delft; otherwise it exceeds the Overpass API rate limit
library(sf)
library(osmextract)
library(osmdata)
# get places from csv survey
places <- survey_together[, 2]
survey_together
# get places from csv survey
places <- survey_together[, "CityBefore"]
# create map - test Delft
## get municipal boundary from osmdata
bb2 <- osmdata::getbb(
place_name = "Delft, Netherlands",
format_out = 'sf_polygon',
silent = FALSE
)
## get data from osmextract
osm_lines = oe_get("Delft, Netherlands", stringsAsFactors = FALSE, quiet = TRUE)
## get data from osmextract
osm_lines = oe_get("Delft, Netherlands", stringsAsFactors = FALSE, quiet = TRUE)
nrow(osm_lines)
ht <- c("primary", "secondary", "tertiary", "unclassified") # highway types of interest
osm_major_roads_delft <- osm_lines[osm_lines$highway %in% ht, ] %>%
sf::st_intersection(bb2)
## plot data
plot(osm_major_roads_delft["highway"], key.pos = 1)
# create map - test Delft
## get municipal boundary from osmdata
bb2 <- osmdata::getbb(
place_name = places[1],
format_out = 'sf_polygon',
silent = FALSE
)
## get data from osmextract
osm_lines = oe_get(places[1], stringsAsFactors = FALSE, quiet = TRUE)
nrow(osm_lines)
ht <- c("primary", "secondary", "tertiary", "unclassified") # highway types of interest
osm_major_roads_delft <- osm_lines[osm_lines$highway %in% ht, ] %>%
sf::st_intersection(bb2)
## plot data
plot(osm_major_roads_delft["highway"], key.pos = 1)
## plot data
plot(osm_major_roads_place["highway"], key.pos = 1)
for (i in 1:n){
## get municipal boundary from osmdata
bb2 <- osmdata::getbb(
place_name = places[1],
format_out = 'sf_polygon',
silent = FALSE
)
## get data from osmextract
osm_lines = oe_get(places[1], stringsAsFactors = FALSE, quiet = TRUE)
nrow(osm_lines)
ht <- c("primary", "secondary", "tertiary", "unclassified") # highway types of interest
osm_major_roads_place <- osm_lines[osm_lines$highway %in% ht, ] %>%
sf::st_intersection(bb2)
## plot data
plot(osm_major_roads_place["highway"], key.pos = 1)
}
places
for (i in 1:n){
## get municipal boundary from osmdata
bb2 <- osmdata::getbb(
place_name = places[i],
format_out = 'sf_polygon',
silent = FALSE
)
## get data from osmextract
osm_lines = oe_get(places[i], stringsAsFactors = FALSE, quiet = TRUE)
nrow(osm_lines)
ht <- c("primary", "secondary", "tertiary", "unclassified") # highway types of interest
osm_major_roads_place <- osm_lines[osm_lines$highway %in% ht, ] %>%
sf::st_intersection(bb2)
## plot data
plot(osm_major_roads_place["highway"], key.pos = 1, main = place[i])
}
places
i=2
## get municipal boundary from osmdata
bb2 <- osmdata::getbb(
place_name = places[i],
format_out = 'sf_polygon',
silent = FALSE
)
## get data from osmextract
osm_lines = oe_get(places[i], stringsAsFactors = FALSE, quiet = TRUE)
## get data from osmextract
osm_lines = oe_get(places[i], stringsAsFactors = FALSE, quiet = TRUE)
nrow(osm_lines)
bb2
for (i in 1:n){
## get municipal boundary from osmdata
bb2 <- osmdata::getbb(
place_name = places[i],
format_out = 'sf_polygon',
silent = FALSE
)
bb <- c(bb, bb2)
}
View(bb2)
plot(bb2)
for (i in 1:n){
## get municipal boundary from osmdata
bb2 <- osmdata::getbb(
place_name = places[i],
format_out = 'sf_polygon',
silent = FALSE
)
ifelse(i == 1){
for (i in 1:n){
## get municipal boundary from osmdata
bb2 <- osmdata::getbb(
place_name = places[i],
format_out = 'sf_polygon',
silent = FALSE
)
if(i == 1){
plot(bb2)
} else {
plot(bb2, add=T)
}
}
for (i in 1:n){
## get municipal boundary from osmdata
assign(paste0("bb", i)) <- osmdata::getbb(
place_name = places[i],
format_out = 'sf_polygon',
silent = FALSE
)
}
assign(paste0("bb", i))
for (i in 1:n){
## get municipal boundary from osmdata
bb <- osmdata::getbb(
place_name = places[i],
format_out = 'sf_polygon',
silent = FALSE
)
assign(paste0("bb", i), bb)
}
plot(bb1, bb2, bb3)
bb1
bb2
bb3
plot(bb1)
plot(bb2)
plot(bb3)
places
i
## get municipal boundary from osmdata
bb <- osmdata::getbb(
place_name = places[i],
format_out = 'sf_polygon',
silent = FALSE
)
bb
bb3
plot(bb3)
View(bb2)
View(bb)
i=1
## get municipal boundary from osmdata
bb <- osmdata::getbb(
place_name = places[i],
>>>>>>> 853d36c9285fb755615e66d2a68e72e0266e806c
format_out = 'sf_polygon',
silent = FALSE
)
assign(paste0("bb", i), bb)
<<<<<<< HEAD
if(i == 1){
bbx <- bb
} else{
bbx <- rbind(bbx, bb)
}
}
#map places on interactive map
leaflet(bbx) %>% addProviderTiles("CartoDB.Positron") %>%
addPolygons()
## create a function to extract the streets of a city x
map_city_streets <- function(x) {
osm_lines = oe_get(x, stringsAsFactors = FALSE, quiet = TRUE)
nrow(osm_lines)
# get highway types of interest
# ht <- c("primary", "secondary", "tertiary", "unclassified")
ht <- c("motorway", "motorway_link", "primary", "primary_link")
bb <- osmdata::getbb(place_name = x,
format_out = 'sf_polygon',
silent = FALSE)
osm_major_roads_place <- osm_lines[osm_lines$highway %in% ht,] %>%
sf::st_intersection(bb)
plot(bb[[1]])
plot(osm_major_roads_place$geometry, add = T, col = "red")
}
## let's map it for Rotterdam
map_city_streets("Rotterdam, NL")
sl <- nrow(survey_google)
# map_city_streets(survey_google[, 4][[sl-2:sl]])
map_city_streets(pull(survey_google[, 4])[sl])
osmextract::oe_get("cologne")
sl <- nrow(survey_google)
# map_city_streets(survey_google[, 4][[sl-2:sl]])
map_city_streets(pull(survey_google[, 4])[sl])
library(sf)
library(osmextract)
library(osmdata)
# get places from csv survey
# places <- survey[, 2]
# get places from google survey
# places_google <- pull(survey_google[, 4])
map_city_streets2 <- function(x) {
## get municipal boundary from osmdata
bb <- osmdata::getbb(place_name = x,
format_out = 'sf_polygon',
silent = FALSE)
## get data from osmextract
osm_lines = oe_get(x,
stringsAsFactors = FALSE,
# force_download = TRUE,
quiet = FALSE)
nrow(osm_lines)
## get highway types of interest
ht <- c(
"motorway",
"motorway_link",
"primary",
"primary_link",
"secondary",
"tertiary",
"unclassified"
)
osm_major_roads <- osm_lines[osm_lines$highway %in% ht, ] %>%
sf::st_intersection(bb)
## plot data
plot(bb)
plot(
osm_major_roads["highway"]$geometry,
key.pos = 1,
add = T,
col = "red",
lwd = 0.7
)
}
# map Delft
map_city_streets2("Delft, Netherlands")
sl <- nrow(survey_google)
# map_city_streets(survey_google[, 4][[sl-2:sl]])
map_city_streets2(pull(survey_google[, 4])[sl])
library(sf)
library(osmextract)
library(osmdata)
library(leaflet)
# get places from csv survey
places <- survey_google[, 4]
for (i in c(1,2,4,5,7:nrow(places))){
## get municipal boundary from osmdata
bb <- osmdata::getbb(
place_name = places[i,],
=======
i=3
## get municipal boundary from osmdata
bb <- osmdata::getbb(
place_name = places[i],
format_out = 'sf_polygon',
silent = FALSE
)
bb[1]
plot(  bb[1])
plot(bb[2])
plot(bb[[1]])
plot(bb[[2]])
plot(bb[[1]])
plot(bb[[2]])
places
places[places == "Paris"] <- "Paris, FR"
for (i in 1:n){
## get municipal boundary from osmdata
bb <- osmdata::getbb(
place_name = places[i],
>>>>>>> 853d36c9285fb755615e66d2a68e72e0266e806c
format_out = 'sf_polygon',
silent = FALSE
)
assign(paste0("bb", i), bb)
<<<<<<< HEAD
if(i == 1){
bbx <- bb
} else{
bbx <- rbind(bbx, bb)
}
}
#map places on interactive map
leaflet(bbx) %>% addProviderTiles("CartoDB.Positron") %>%
addPolygons()
survey_google[c(1,2,4,5,7:nrow(places)), 4]
# get places from csv survey
places <- survey_google[c(1,2,4,5,7:nrow(places)), 4]
places
library(sf)
library(osmextract)
library(osmdata)
library(leaflet)
# get places from csv survey
places <- survey_google[c(1,2,4,5,7:nrow(places)), 4]
for (i in 1:nrow(places)){
## get municipal boundary from osmdata
bb <- osmdata::getbb(
place_name = places[i,],
format_out = 'sf_polygon',
silent = FALSE
)
assign(paste0("bb", i), bb)
if(i == 1){
bbx <- bb
} else{
bbx <- rbind(bbx, bb)
}
}
library(sf)
library(osmextract)
library(osmdata)
library(leaflet)
# get places from csv survey
places <- survey_google[c(1,2,4,5,7), 4]
for (i in 1:nrow(places)){
## get municipal boundary from osmdata
bb <- osmdata::getbb(
place_name = places[i,],
format_out = 'sf_polygon',
silent = FALSE
)
assign(paste0("bb", i), bb)
if(i == 1){
bbx <- bb
} else{
bbx <- rbind(bbx, bb)
}
}
#map places on interactive map
leaflet(bbx) %>% addProviderTiles("CartoDB.Positron") %>%
addPolygons()
sl <- nrow(survey_google)
# map_city_streets(survey_google[, 4][[sl-2:sl]])
map_city_streets(pull(survey_google[, 4])[4])
osmextract::oe_get("Vienna")
osmextract::oe_get("Vienna, Austria")
osmextract::oe_get("Vienna, Austria", force_download = TRUE)
lubrudate::mdy("June 1, 2015")
lubridate::mdy("June 1, 2015")
=======
}
bb3
plot(bb3)
plot(bb1, bb2, bb3)
plot(bb1)
plot(bb2, add=T)
bbx <- c(bb1, bb2, bb3)
plot(bbx)
bb1
bbx <- rbind(bb1, bb2, bb3)
plot(bbx)
library(leaflet)
leaflet(bbx) %>% addProviderTiles("CartoDB.Positron") %>%
addPolygons()
i=1
## get data from osmextract
osm_lines = oe_get(places[i], stringsAsFactors = FALSE, quiet = TRUE)
nrow(osm_lines)
ht <- c("primary", "secondary", "tertiary", "unclassified") # highway types of interest
osm_major_roads_place <- osm_lines[osm_lines$highway %in% ht, ] %>%
sf::st_intersection(get(paste0("bb", i)))
## plot data
plot(osm_major_roads_place["highway"], key.pos = 1, main = place[i])
map_city_streets <- function(x){
osm_lines = oe_get(x, stringsAsFactors = FALSE, quiet = TRUE)
nrow(osm_lines)
ht <- c("primary", "secondary", "tertiary", "unclassified") # highway types of interest
bb <- osmdata::getbb(
place_name = x,
format_out = 'sf_polygon',
silent = FALSE
)
osm_major_roads_place <- osm_lines[osm_lines$highway %in% ht, ] %>%
sf::st_intersection(bb)
## plot data
plot(osm_major_roads_place["highway"], key.pos = 1, main = x)
}
map_city_streets("Delft, NL")
for(i in places){
map_city_streets(i)
}
s1 <- get_city_streets(places[1])
get_city_streets <- function(x){
osm_lines = oe_get(x, stringsAsFactors = FALSE, quiet = TRUE)
nrow(osm_lines)
ht <- c("primary", "secondary", "tertiary", "unclassified") # highway types of interest
bb <- osmdata::getbb(
place_name = x,
format_out = 'sf_polygon',
silent = FALSE
)
osm_major_roads_place <- osm_lines[osm_lines$highway %in% ht, ] %>%
sf::st_intersection(bb)
}
s1 <- get_city_streets(places[1])
s1 <- get_city_streets(places[1])
s1
s1$other_tags
s1@data
s1$other_tags
s1$highway
s1
str(s1$other_tags)
a <- s1[1,"other_tags"]
a
gsub("maxspeed", " ", a)
gsub("[[maxspeed]]", " ", a)
gsub(".*\\maxspeed", " ", a)
gsub(".*\\maxspeed", " ", a)
gsub("\\d.*", "", ( gsub(".*\\maxspeed", " ", a))
gsub("maxspeed", " ", a)
a <- s1[1,"other_tags"]
gsub("maxspeed", " ", a)
gsub(".*\\maxspeed", " ", a)
a
b<- gsub('.*\\maxspeed"=>"', " ", a)
b<- gsub(".*\\maxspeed", " ", a)
b
gsub("\\d.*", "", b)
gsub("\\d.*", b)
gsub(".*\\d",, b)
gsub(".*\\d","", b)
gsub("[[:punct:]]","", b)
a <- s1[3,"other_tags"]
b<- gsub(".*\\maxspeed", "", a)
c<- gsub("[[:punct:]]","", b)
c
d<- substr(c, 1, 2)
a <- s1[3,"other_tags"]
b<- gsub(".*\\maxspeed", "", a)
c<- gsub("[[:punct:]]","", b)
d<- as.numeric(substr(c, 1, 2))
d
c
d
d<- as.numeric(substr(c, 1, 2))[1]
c
e<-d[1]
e
s1$maxSpeed <- as.numeric(substr(gsub("[[:punct:]]","", gsub(".*\\maxspeed", "",s1$other_tags)), 1, 2))[1]
s1
s1$geometry
s1 <- get_city_streets(places[1])
st_length(s1)
install.packages("lwgeom")
library(ggplot2)
library(lwgeom)
s1 <- get_city_streets(places[1])
s1 <- get_city_streets(places[1])
st_length(s1)
s1$length <- st_length(s1)
s1$length <- st_length(s1)
s1
q <- ggplot(s1, aes(x=length, y=highway))
q + geom_boxplot()
q <- ggplot(s1, aes(y=length, x=highway))
q + geom_boxplot()
plot(s1$length, s1$highway)
q <- ggplot(s1, aes(x=length))
q + geom_boxplot()
plot(s1)
q <- ggplot(survey_together)
q+ geom_point(x=SeniorityAtTUD, y=InterestR)
q+ geom_point(aes(x=SeniorityAtTUD, y=InterestR))
# lists the files with "survey-" in their name in the same folder as this document
files <- list.files(pattern="^survey-")
survey <- tibble()
n <- length(files)
# the 'for-loop':
for (i in 1:n){
f <- read.csv2(files[i], header=F)
if(i == 1){
survey <- f
} else {
survey <- cbind(survey, f[,2])
}
}
transpose <- as.data.frame(t(survey))
colnames(transpose) <- c("Name", "ArrivalYearTU", "CityBefore", "InterestR", "Experience")
survey_together <- transpose[-1,]
rownames(survey_together) <- 1:n
survey_together$ArrivalYearTU <- as.numeric(survey_together$ArrivalYearTU)
survey_together$InterestR <- as.numeric(survey_together$InterestR)
# as with spreadsheets, we can create new variables
survey_together$SeniorityAtTUD <- 2021 - survey_together$ArrivalYearTU
survey_together
q <- ggplot(survey_together)
q+ geom_point(aes(x=SeniorityAtTUD, y=InterestR))
q+ geom_point(aes(x=SeniorityAtTUD, y=InterestR)) +
stat_smooth(method = "lm", col = "red")
q <- ggplot(survey_together, aes(x=SeniorityAtTUD, y=InterestR))
q+ geom_point() +
stat_smooth(method = "lm", col = "red")
q+ geom_point()
q+ geom_point() +
stat_smooth(method = "lm", col = "red")
fit <- lm(InterestR ~ SeniorityAtTUD, data = survey_together)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(tidyverse)  # collection of packages for data manipulation, visualisation, etc.
library(tidyverse)  # collection of packages for data manipulation, visualisation, etc.
library(googlesheets4)  # access data from Google sheets
library(sf)  # working with spatial data
library(osmdata)  # access OpenStreetMap data via the Overpass API
library(osmextract)  # retrieve bulk OpenStreetMap data
library(ggmap)
library(kableExtra)  # create and style HTML tables
# read survey data from csv files
files <- list.files(pattern="^survey-")
survey <- tibble()
for (i in seq_along(files)){
survey <- rbind(survey, t(read_csv(files[i])[,2]))
}
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(tidyverse)  # collection of packages for data manipulation, visualisation, etc.
library(tidyverse)  # collection of packages for data manipulation, visualisation, etc.
library(googlesheets4)  # access data from Google sheets
library(sf)  # working with spatial data
library(osmdata)  # access OpenStreetMap data via the Overpass API
library(osmextract)  # retrieve bulk OpenStreetMap data
library(ggmap)
library(kableExtra)  # create and style HTML tables
# read survey data from csv files
files <- list.files(pattern="^survey-")
survey <- tibble()
for (i in seq_along(files)){
survey <- rbind(survey, t(read_csv(files[i])[,2]))
}
# Read survey data from a Google sheet that stores the survey responses
# Note that getting data via `googlesheets4` requires a Google account
# unless `gs4_deauth()` is used. Here we choose to deauthorise so that
# the workshop participants can easily access the data.
gs4_deauth()
survey_google <- read_sheet("https://docs.google.com/spreadsheets/d/1_eErh6dy7uMiEewDc4OW_R3sl0qah2-1kYj3JW9H5tA/edit?resourcekey#gid=800252241")
survey_google
>>>>>>> 853d36c9285fb755615e66d2a68e72e0266e806c
